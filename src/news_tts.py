from RUTTS import TTS
from ruaccent import RUAccent

CUSTOM_SPECIFIC_ACCENTS = {
    "тесла": "т+есла",
    "порше": "п+орше",
    "ягуар": "ягу+ар",
    "лексус": "л+ексус",
    "киа": "к+иа",
    "ламборгини": "ламборг+ини",
    "ламборджини": "ламбордж+ини",
    "ниссан": "нисс+ан",
    "хюндай": "х+юндай",
    "рено": "рен+о",
    "чери": "ч+ери",
    "кайен": "кай+ен",
    "эскалейд": "эскал+ейд",
    "купе": "куп+е",
    "конвертибл": "конв+ертибл",
    "седан": "сед+ан",
    "хетчбек": "хетчб+ек",
    "кроссовер": "кросс+овер",
    "спорткар": "спортк+ар",
    "гелик": "г+елик",
    "фургон": "фург+он",
    "электродвигатель": "электродв+игатель",
    "пневмоподвеска": "пневмоподв+еска",
    "гибридный": "гибр+идный",
    "турбодизель": "турбод+изель",
    "автопилот": "автопил+от",
    "антиблокировочная": "антиблокир+овочная",
    "аэродинамика": "аэродин+амика",
    "газонаполненные": "газонап+олненные",
    "амортизаторы": "амортиз+аторы",
    "эксплуатация": "эксплуат+ация",
    "сервисный": "с+ервисный",
    "топливоэффективность": "топливоэффект+ивность",
    "аксессуары": "аксессу+ары",
    "навигация": "навиг+ация",
    "клиренс": "кл+иренс",
    "комфорт": "комф+орт",
    "тюнинг": "т+юнинг",
    "гибрид": "гибр+ид",
    "запчасти": "запч+асти",
    "стабилизации": "стабилиз+ации",
    "автосалон": "автосал+он",
    "электромобильность": "электромоб+ильность",
    "стартап": "старт+ап",
    "автомобильный": "автомоб+ильный",
    "легковой": "легков+ой",
    "спецификации": "специфик+ации",
    "подвеска": "подв+еска",
    "грузовик": "грузов+ик",
    "аэрография": "аэрогр+афия",
    "топливная": "т+опливная",
    "легкосплавные": "легкоспл+авные",
    "эксплуатационные": "эксплуатаци+онные",
    "рециклинг": "рец+иклинг",
    "автовладелец": "автовлад+елец",
    "колесные": "кол+есные",

}

class NewsTts:
    def __init__(self):
        self.tts = TTS("TeraTTS/natasha-g2p-vits", add_time_to_end=0.8)
        self.accentizer = RUAccent(workdir="./model")
        self.accentizer.load(omograph_model_size='big_poetry', use_dictionary=True, custom_dict=CUSTOM_SPECIFIC_ACCENTS)

    def play_audio(self, audio):
        self.tts.play_audio(audio)

    def save_wav_of_tts(self, audio, file_name="temp.ogg", save_path="./result/speech/"):
        full_path = save_path + file_name
        print(full_path)
        self.tts.save_wav(audio, full_path)
        return '.' + full_path

    def get_audio(self, text):
        stressed_text = self.accentizer.process_all(text)
        audio = self.tts(stressed_text, lenght_scale=1.2)
        return audio